import pytest
import matrix


# Тестирование генерации матрицы
def test_matrix():
    # Матрица 2х2 диапазон от 1 до 1
    res1 = matrix.matrix(2, 2, 1, 1)
    # Матрица 3х3 диапазон от 2 до 2
    res2 = matrix.matrix(3, 3, 2, 2)
    # Матрица 5х2 диапазон от 3 до 3
    res3 = matrix.matrix(5, 2, 3, 3)
    assert res1 == [[1, 1], [1, 1]]
    assert res2 == [[2, 2, 2], [2, 2, 2], [2, 2, 2]]
    assert res3 == [[3, 3], [3, 3], [3, 3], [3, 3], [3, 3]]


# Тестирование сложения матриц
# Тест на размер матриц не требуется, так как эта проверка происходит в самом модуле matrix
def test_sum_m():
    a = [[0, 1], [1, 1]]
    b = [[2, 1], [1, 3]]
    c = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
    d = [[8, 7, 6], [5, 4, 3], [2, 1, 0]]
    # Сложение матриц 2х2
    res1 = matrix.sum_m(a, b)
    # Сложение матриц 3х3
    res2 = matrix.sum_m(c, d)
    assert res1 == [[2, 2], [2, 4]]
    assert res2 == [[8, 8, 8], [8, 8, 8], [8, 8, 8]]


# Тестирование вычитания матриц
# Тест на размер матриц не требуется, так как эта проверка происходит в самом модуле matrix
def test_minus_m():
    a = [[0, 1], [1, 1]]
    b = [[2, 1], [1, 3]]
    c = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
    d = [[8, 7, 6], [5, 4, 3], [2, 1, 0]]
    # Вычитание матриц 2х2
    res1 = matrix.minus_m(a, b)
    # Вычитание матриц 3х3
    res2 = matrix.minus_m(c, d)
    assert res1 == [[-2, 0], [0, -2]]
    assert res2 == [[-8, -6, -4], [-2, 0, 2], [4, 6, 8]]


# Тестирование умножения матриц
# Тест на размер матриц не требуется, так как эта проверка происходит в самом модуле matrix
def test_mult_m():
    a = [[0, 1], [1, 1]]
    b = [[2, 1], [1, 3]]
    c = [[0, 1, 2], [3, 4, 5]]
    d = [[5, 4], [3, 2], [1, 0]]
    # Умножение матриц 2х2
    res1 = matrix.mult_m(a, b)
    # Умножение матрицы 2х3 на матрицу 3х2
    res2 = matrix.mult_m(c, d)
    assert res1 == [[1, 3], [3, 4]]
    assert res2 == [[5, 2], [32, 20]]


# Тестирование умножения матрицы на число
def test_mult_m_2():
    a = [[1, 1], [1, 1]]
    b = 5
    c = [[0, 1], [2, 3], [4, 5], [6, 7]]
    d = -2
    # Матрица 2х2 умножается на чило 5
    res1 = matrix.mult_m_2(a, b)
    # Матрица 4х2 умножается на чило -2
    res2 = matrix.mult_m_2(c, d)
    assert res1 == [[5, 5], [5, 5]]
    assert res2 == [[0, -2], [-4, -6], [-8, -10], [-12, -14]]


# Тестирование вычисления определителя 2 порядка
# Тест на размер матриц не требуется, так как в самом модуле matrix можно задать матрицу только 2х2
def test_opred_2():
    a = [[0, 1], [1, 1]]
    res1 = matrix.opred_2(a)
    assert res1 == -1


# Тестирование вычисления определителя 3 порядка
# Тест на размер матриц не требуется, так как в самом модуле matrix можно задать матрицу только 2х2
def test_opred_3():
    a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    res1 = matrix.opred_3(a)
    assert res1 == 0


# Тестирование матриц на одинаковую размерность
def test_matrix_equal():
    a = [[0, 1], [1, 1]]
    b = [[2, 1], [1, 3]]
    c = [[0, 0, 0, 0], [1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]
    d = [[9, 9, 9, 9], [1, 1, 1, 1], [5, 5, 5, 5], [0, 0, 0, 0]]
    # Матрицы 2х2
    res1 = matrix.matrix_equal(a, b)
    # Матрицы 4х4
    res2 = matrix.matrix_equal(c, d)
    assert res1 is True
    assert res2 is True


if __name__ == '__main__':
    pytest.main()
